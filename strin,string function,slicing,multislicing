# 28-06-2025
# Strings    
# "", '', either surrounded by single quotes or double quotes.
# collection of alphabets. 
# unchangable/immutable. 
# order type/sequence type, we can access items using index.
# Positive indexing 0,1,2,3,4,5..........., Negative indexing .........-3, -2, -1

# assign string to a variable.
a="hello"      # Positive indexing h=0, e=1, l=2, l=3, o=4      Negative indexing    h=-5 e=-4, l=-3, l=-2, o=-1
print(a)

a='hello'
print(a)

# #Indexing   start =0
a="hello"    # h=0, e=1, l=2, l=3, o=4
print(a[2])

# # Negative indexing start from last -1
a="hello"     # h=-5,e=-4,l=-3,l=-2,o=-1
print(a[-4])

# # length start =1
a="hello hello"   # h=1 .... o=5
print(len(a))

# looping through a string.
print("With for loop")
a="Mango is fruit"
for x in a:
    print(x)

# print("Without for loop")
# a="Mango"
# print(a[0])
# print(a[1])
# print(a[2])
# print(a[3])
# print(a[4])

# # Check if particular word/substring is present in string.
txt="I love to watch tarak mehta ka ulta chashma"
print("tarak mehta ka" in txt)                 
print("tarak Mehta ka" in txt)               
print("jethalal" in txt)           
print("tarak" not in txt)          
 
# slicing:- return a range of characters.  range(0,5)  range(0,1,2,3,4)
a="hello"    # h=0, e=1, l=2, l=3, o=4
print(a[1:4])  # 1,2,3   (1,4-1)  (1,3)

a="Hello! World"
print(a[3:8])   #(3,7)
print(len(a))      # length
print(a[6])
print(id(a))        # address
print(type(a))      # type of variable

a="Hello! World"
print(a[:5])          # start = 0....4
print(a[:7])          # 0,6
print(a[2:])          # start = 2    until last

# # # # Slicing with Negative index.
a="Hello! World"         # h=-12.........!=-7,  =-6 W=-5,o=-4,r=-3,l=-2,d=-1
print(a[-6:-1])         # (-6,-2)
print(a[:-1])       # (-12,-2)
print(a[-5:])
  
# Multiline string.
a="""Lorem Ipsum is simply dummy text of the printing and typesetting industry. 
Lorem Ipsum has been the industry's standard dummy text ever since the 1500s,
when an unknown printer took a galley of type and scrambled it to make a type 
specimen book.  It has survived not only five centuries, but also the leap into 
electronic typesetting, remaining essentially unchanged. It was popularised in 
the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, 
and more recently with desktop publishing software like Aldus PageMaker including 
versions of Lorem Ipsum"""
print(a)

# # String Function
print("\nString Functions:\n")
# upper() =Modify in upper case
a="hello"   # HELLO
print(a.upper())

# # # # lower() =Modify in lower case
a="hEllo"
print(a.lower())

# # replace()
a="hEllo"
print(a.replace("E","u"))

# # split()
a="Hello world"    # H    llo world
print(a.split("o"))

# # # Captilize()
a="hello world"
print(a.capitalize())

# # # index()   first occurence.
txt="Hi this is python code"
print(txt.index("is"))

# # index()   first occurence.
# txt="Hi this is python code"
# print(txt.index("of"))            

# # rindex()  last occurence.
txt="Hi this is python code"
print(txt.rindex("is"))

# # rindex() last occurence.
# txt="Hi this is python code"
# print(txt.rindex("are"))

# find()    almost same as index(). But if value not found then it will not give error it will give '-1'
txt="Hi this string will use find function"
print(txt.find("string"))
print(txt.find("world"))

# # rfind()  almost same as rindex(). -1
txt="Hi this string will use string find function"
print(txt.rfind("string"))
print(txt.rfind("world"))

# # is alnum(): return true if all are alphanumeric(a-z)(0-9)
txt="String123"   
print(txt.isalnum())
txt="Str ing12 @#$"
print(txt.isalnum())

# # is alpha(): return true if all are alphabets(a-z)
txt="String"
print(txt.isalpha())

# # islower(): return true if all are lower.
dig="hELlo"
print(dig.islower())

# # isupper(): return true if all are upper.
dig="HELLO"
print(dig.isupper())

# # is digit(): return true if all are digit.
dig="12345F67"
print(dig.isdigit())

# # casefold(): same as lower(), but lowercase more number of alphabets.
case="HELlo, this is Casefold"
print(case.casefold())
